secrets:
  GOOGLE_KEY:
    file: .secrets/GOOGLE_KEY
  GOOGLE_SECRET:
    file: .secrets/GOOGLE_SECRET
  SESSION_SECRET:
    file: .secrets/SESSION_SECRET

services:
  neo4j:
    image: neo4j:5.15-community
    environment:
      NEO4J_AUTH: neo4j/testpassword
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7687:7687"
      - "7474:7474"
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p testpassword 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - sargantana-network

  redis:
    image: redis:7.2-alpine
    hostname: redis
    command: >
      sh -c "
      echo 'user default off' > users.acl &&
      echo 'user redisuser on >redispass allcommands allkeys' >> users.acl &&
      redis-server
      --port 6379
      --tls-port 6380
      --tls-cert-file /certs/redis.crt
      --tls-key-file /certs/redis.key
      --tls-ca-cert-file /certs/ca.crt
      --tls-auth-clients no
      --aclfile users.acl
      "
    ports:
      - "6379:6379"
      - "6380:6380"
    volumes:
      - ./certs:/certs:ro
    depends_on:
      generate-certs:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h redis -p 6379 -a redispass ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - sargantana-network

  generate-certs:
    image: alpine:latest
    command:
      - sh
      - -c
      - |
        apk add --no-cache openssl
        mkdir -p /certs && rm -f /certs/* && cd /certs

        # Generate CA with proper extensions
        cat > ca.cnf <<EOF
        [req]
        distinguished_name = req_distinguished_name
        x509_extensions = v3_ca

        [req_distinguished_name]

        [v3_ca]
        basicConstraints = critical,CA:TRUE
        keyUsage = critical,keyCertSign,cRLSign
        subjectKeyIdentifier = hash
        EOF

        openssl genrsa -out ca.key 4096
        openssl req -new -x509 -days 365 -key ca.key -out ca.crt \
          -subj '/C=US/ST=CA/L=San Francisco/O=Sargantana/CN=Redis CA' \
          -config ca.cnf -extensions v3_ca

        # Generate Redis server certificate with SAN
        openssl genrsa -out redis.key 2048
        openssl req -new -key redis.key -out redis.csr \
          -subj '/C=US/ST=CA/L=San Francisco/O=Sargantana/CN=redis'

        cat > san.cnf <<EOF
        [req_ext]
        subjectAltName = @alt_names
        keyUsage = critical,digitalSignature,keyEncipherment
        extendedKeyUsage = serverAuth

        [alt_names]
        DNS.1 = localhost
        DNS.2 = redis
        EOF

        openssl x509 -req -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
          -out redis.crt -days 365 -extfile san.cnf -extensions req_ext

        # Generate client certificate
        openssl genrsa -out client.key 2048
        openssl req -new -key client.key -out client.csr \
          -subj '/C=US/ST=CA/L=San Francisco/O=Sargantana/CN=client'

        cat > client.cnf <<EOF
        [req_ext]
        keyUsage = critical,digitalSignature,keyEncipherment
        extendedKeyUsage = clientAuth
        EOF

        openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
          -out client.crt -days 365 -extfile client.cnf -extensions req_ext

        chmod 644 *.crt *.key
        echo 'TLS certificates generated successfully'
    volumes:
      - ./certs:/certs
    networks:
      - sargantana-network

  mock-oauth2-server:
    image: ghcr.io/navikt/mock-oauth2-server:2.2.1
    ports:
      - "8081:8081"
    hostname: host.docker.internal
    environment:
      LOG_LEVEL: DEBUG
      SERVER_PORT: 8081
      JSON_CONFIG: |
        {
          "interactiveLogin": false,
          "httpServer": "NettyWrapper",
          "tokenCallbacks": [
            {
              "issuerId": "default",
              "tokenExpiry": "120",
              "requestMappings": [
                {
                  "requestParam": "grant_type",
                  "match": "authorization_code",
                  "claims": {
                    "aud": "sargantana",
                    "acr": "Level4",
                    "groups": ["sargantana-users"],
                    "sub": "test-user"
                  }
                }
              ]
            }
          ]
        }
    networks:
      - sargantana-network

  vault:
    image: hashicorp/vault:1.17
    container_name: vault-dev
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "
        vault server -dev -dev-root-token-id=dev-root-token -dev-listen-address=0.0.0.0:8200 &
        sleep 10 &&
        export VAULT_ADDR=http://0.0.0.0:8200 VAULT_TOKEN=dev-root-token &&
        vault kv put secret/sargantana GOOGLE_KEY=test-google-key GOOGLE_SECRET=test-google-secret SESSION_SECRET=test-session-secret-that-is-long-enough &&
        vault secrets enable -version=1 -path=secret-v1 kv &&
        vault kv put secret-v1/sargantana GOOGLE_KEY=test-google-key GOOGLE_SECRET=test-google-secret SESSION_SECRET=test-session-secret-that-is-long-enough &&
        echo 'Vault initialized with test secrets' &&
        tail -f /dev/null
      "
    networks:
      - sargantana-network

  postgresql:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: my_blog_db
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - sargantana-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack-dev
    ports:
      - "4566:4566"
    environment:
      SERVICES: secretsmanager
      DEBUG: 0
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    entrypoint: /bin/sh
    command:
      - -c
      - |
        /usr/local/bin/docker-entrypoint.sh &
        echo "Waiting for LocalStack to be ready..."
        until awslocal secretsmanager list-secrets --region us-east-1 >/dev/null 2>&1; do
          sleep 1
        done
        echo "LocalStack is ready, initializing secrets..."
        awslocal secretsmanager create-secret --name sargantana/test --secret-string '{"GOOGLE_KEY":"test-google-key","GOOGLE_SECRET":"test-google-secret","SESSION_SECRET":"test-session-secret-that-is-long-enough"}' --region us-east-1
        awslocal secretsmanager create-secret --name sargantana/plain-secret --secret-string 'plain-text-secret-value' --region us-east-1
        echo "AWS Secrets Manager initialized with test secrets"
        wait
    healthcheck:
      test: ["CMD", "awslocal", "secretsmanager", "list-secrets", "--query", "length(SecretList)", "--output", "text"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - sargantana-network

volumes:
  pg_data:

networks:
  sargantana-network:
