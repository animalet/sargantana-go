secrets:
  GOOGLE_KEY:
    file: .secrets/GOOGLE_KEY
  GOOGLE_SECRET:
    file: .secrets/GOOGLE_SECRET
  SESSION_SECRET:
    file: .secrets/SESSION_SECRET

services:
  neo4j:
    # The Docker image to use for the container
    image: neo4j:5.15-community

    # Environment variables passed to the container
    environment:
      # Sets the authentication credentials for the Neo4j database
      - NEO4J_AUTH=neo4j/testpassword
      # Specifies a list of plugins to install on startup
      - NEO4J_PLUGINS=["apoc"]

    # Port mappings from the host machine to the container
    ports:
      # Maps the Bolt protocol port (for database drivers)
      - "7687:7687"
      # Maps the HTTP/HTTPS port (for the Neo4j Browser)
      - "7474:7474"

    # Health check to determine if the container is running properly
    healthcheck:
      # The command to run to check the health of the service
      test: [ "CMD-SHELL", "cypher-shell -u neo4j -p testpassword 'RETURN 1'" ]
      # How often to run the health check
      interval: 10s
      # How long to wait for the check to complete before considering it failed
      timeout: 5s
      # How many consecutive failures are needed to mark the container as unhealthy
      retries: 10
  valkey:
    hostname: redis
    image: docker.io/bitnami/valkey:8.0
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      ALLOW_EMPTY_PASSWORD: yes
      VALKEY_DISABLE_COMMANDS: FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'valkey_data:/bitnami/valkey/data'
  mock-oauth2-server:
    image: ghcr.io/navikt/mock-oauth2-server:2.2.1
    ports:
      - "8080:8080"
    hostname: host.docker.internal
    environment:
      LOG_LEVEL: DEBUG
      JSON_CONFIG: |
        {
          "interactiveLogin": false,
          "httpServer": "NettyWrapper",
          "tokenCallbacks": [
            {
              "issuerId": "default",
              "tokenExpiry": "120",
              "requestMappings": [
                {
                  "requestParam": "grant_type",
                  "match": "authorization_code",
                  "claims": {
                    "aud": "sargantana",
                    "acr": "Level4",
                    "groups": ["sargantana-users"],
                    "sub": "test-user"
                  }
                }
              ]
            }
          ]
        }
    networks:
      - sargantana-network

  vault:
    image: hashicorp/vault:1.17
    container_name: vault-dev
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-root-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_ADDR: "http://127.0.0.1:8200"
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "
        vault server -dev -dev-root-token-id=dev-root-token -dev-listen-address=0.0.0.0:8200 &
        sleep 5 &&
        export VAULT_ADDR=http://0.0.0.0:8200 &&
        export VAULT_TOKEN=dev-root-token &&
        vault auth -method=token token=dev-root-token &&
        vault kv put secret/sargantana GOOGLE_KEY=test-google-key GOOGLE_SECRET=test-google-secret SESSION_SECRET=test-session-secret-that-is-long-enough &&
        echo 'Vault initialized with test secrets' &&
        tail -f /dev/null
      "
    networks:
      - sargantana-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  valkey_data:
    driver: local

networks:
  sargantana-network:
    driver: bridge
