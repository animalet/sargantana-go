secrets:
  GOOGLE_KEY:
    file: .secrets/GOOGLE_KEY
  GOOGLE_SECRET:
    file: .secrets/GOOGLE_SECRET
  SESSION_SECRET:
    file: .secrets/SESSION_SECRET

services:
  neo4j:
    # The Docker image to use for the container
    image: neo4j:5.15-community

    # Environment variables passed to the container
    environment:
      # Sets the authentication credentials for the Neo4j database
      - NEO4J_AUTH=neo4j/testpassword
      # Specifies a list of plugins to install on startup
      - NEO4J_PLUGINS=["apoc"]

    # Port mappings from the host machine to the container
    ports:
      # Maps the Bolt protocol port (for database drivers)
      - "7687:7687"
      # Maps the HTTP/HTTPS port (for the Neo4j Browser)
      - "7474:7474"

    # Health check to determine if the container is running properly
    healthcheck:
      # The command to run to check the health of the service
      test: [ "CMD-SHELL", "cypher-shell -u neo4j -p testpassword 'RETURN 1'" ]
      # How often to run the health check
      interval: 10s
      # How long to wait for the check to complete before considering it failed
      timeout: 5s
      # How many consecutive failures are needed to mark the container as unhealthy
      retries: 10
    networks:
      - sargantana-network

  redis:
    hostname: redis
    image: redis:7.2-alpine
    command: >
      redis-server
      --port 6379
      --tls-port 6380
      --tls-cert-file /certs/redis.crt
      --tls-key-file /certs/redis.key
      --tls-ca-cert-file /certs/ca.crt
    ports:
      - "6380:6380"
      - "6379:6379"
    volumes:
      - ./certs:/certs:ro
    networks:
      - sargantana-network
    depends_on:
      generate-certs:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h redis -p 6379 ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  generate-certs:
    image: alpine:latest
    command: >
      sh -c "
        apk add --no-cache openssl &&
        mkdir -p /certs &&
        cd /certs &&
        # Generate CA private key
        openssl genrsa -out ca.key 4096 &&
        # Generate CA certificate
        openssl req -new -x509 -days 365 -key ca.key -out ca.crt -subj '/C=US/ST=CA/L=San Francisco/O=Sargantana/CN=Redis CA' &&
        # Generate server private key
        openssl genrsa -out redis.key 2048 &&
        # Generate server certificate signing request
        openssl req -new -key redis.key -out redis.csr -subj '/C=US/ST=CA/L=San Francisco/O=Sargantana/CN=redis' &&
        # Generate server certificate
        openssl x509 -req -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt -days 365 &&
        # Set proper permissions
        chmod 644 redis.crt ca.crt &&
        chmod 600 redis.key ca.key &&
        echo 'TLS certificates generated successfully'
      "
    volumes:
      - './certs:/certs'
    networks:
      - sargantana-network

  mock-oauth2-server:
    image: ghcr.io/navikt/mock-oauth2-server:2.2.1
    ports:
      - "8080:8080"
    hostname: host.docker.internal
    environment:
      LOG_LEVEL: DEBUG
      JSON_CONFIG: |
        {
          "interactiveLogin": false,
          "httpServer": "NettyWrapper",
          "tokenCallbacks": [
            {
              "issuerId": "default",
              "tokenExpiry": "120",
              "requestMappings": [
                {
                  "requestParam": "grant_type",
                  "match": "authorization_code",
                  "claims": {
                    "aud": "sargantana",
                    "acr": "Level4",
                    "groups": ["sargantana-users"],
                    "sub": "test-user"
                  }
                }
              ]
            }
          ]
        }
    networks:
      - sargantana-network

  vault:
    image: hashicorp/vault:1.17
    container_name: vault-dev
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-root-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "
        vault server -dev -dev-root-token-id=dev-root-token -dev-listen-address=0.0.0.0:8200 &
        sleep 10 &&
        export VAULT_ADDR=http://0.0.0.0:8200 &&
        export VAULT_TOKEN=dev-root-token &&
        vault kv put secret/sargantana GOOGLE_KEY=test-google-key GOOGLE_SECRET=test-google-secret SESSION_SECRET=test-session-secret-that-is-long-enough &&
        vault secrets enable -version=1 -path=secret-v1 kv &&
        vault kv put secret-v1/sargantana GOOGLE_KEY=test-google-key GOOGLE_SECRET=test-google-secret SESSION_SECRET=test-session-secret-that-is-long-enough &&
        echo 'Vault initialized with test secrets for both KV v1 and KV v2' &&
        tail -f /dev/null
      "

volumes:
  valkey_data:
    driver: local

networks:
  sargantana-network:
    driver: bridge
