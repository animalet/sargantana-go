name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.0'

jobs:
  pipeline:
    name: Pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      oauth2-mock:
        image: ghcr.io/navikt/mock-oauth2-server:2.2.1
        ports:
          - 8080:8080
        env:
          LOG_LEVEL: DEBUG
          JSON_CONFIG: |
            {
              "interactiveLogin": false,
              "httpServer": "NettyWrapper",
              "tokenCallbacks": [
                {
                  "issuerId": "default",
                  "tokenExpiry": "120",
                  "requestMappings": [
                    {
                      "requestParam": "grant_type",
                      "match": "authorization_code",
                      "claims": {
                        "aud": "sargantana",
                        "acr": "Level4",
                        "groups": ["sargantana-users"],
                        "sub": "test-user"
                      }
                    }
                  ]
                }
              ]
            }
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      neo4j:
        image: neo4j:5.15-community
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      vault:
        image: hashicorp/vault:1.17
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: dev-root-token
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
          VAULT_ADDR: http://0.0.0.0:8200
        options: >-
          --cap-add=IPC_LOCK
          --health-cmd "vault status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Initialize Vault with test secrets
        run: |
          # Wait for Vault to be ready
          timeout 60s bash -c 'until curl -s http://localhost:8200/v1/sys/health; do sleep 2; done'
          
          # Set Vault environment variables
          export VAULT_ADDR=http://localhost:8200
          export VAULT_TOKEN=dev-root-token
          
          # Install Vault CLI
          wget -O vault.zip https://releases.hashicorp.com/vault/1.17.0/vault_1.17.0_linux_amd64.zip
          unzip vault.zip
          sudo mv vault /usr/local/bin/
          
          # Initialize test secrets for KV v2 (default)
          vault kv put secret/sargantana \
            GOOGLE_KEY=test-google-key \
            GOOGLE_SECRET=test-google-secret \
            SESSION_SECRET=test-session-secret-that-is-long-enough
          
          # Enable KV v1 engine and add test secrets
          vault secrets enable -version=1 -path=secret-v1 kv
          vault kv put secret-v1/sargantana \
            GOOGLE_KEY=test-google-key \
            GOOGLE_SECRET=test-google-secret \
            SESSION_SECRET=test-session-secret-that-is-long-enough
          
          echo "Vault initialized with test secrets for both KV v1 and KV v2"

      - name: Run ci build via Make
        run: make ci
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: testpassword
          # Point OAuth providers to mock server
          OAUTH_MOCK_SERVER_URL: http://localhost:8080

      - name: Check test coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: coverage.out
          git-token: ${{ github.ref_name == 'main' && secrets.GITHUB_TOKEN || '' }}
          git-branch: badges
          config: ./.testcoverage.yml