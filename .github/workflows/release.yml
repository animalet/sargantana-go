name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
      prerelease:
        description: 'Is this a prerelease? (true/false)'
        default: 'false'
        options:
          - 'true'
          - 'false'
        required: false

env:
  GO_VERSION: '1.25.0'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: darwin
            goarch: amd64
            suffix: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            ext: .exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          
          # Get version info from git
          VERSION="${{ github.event.inputs.version }}"
          BINARY_NAME="sargantana-go-${{ matrix.suffix }}${{ matrix.ext }}"
          go build -ldflags="-s -w -X main.version=${VERSION}" -o "dist/${BINARY_NAME}" ./main
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.suffix }}
          path: dist/sargantana-go-${{ matrix.suffix }}${{ matrix.ext }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find dist/ -type f -name "sargantana-go-*" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create GitHub Release
        run: |
          TAG="${{ github.event.inputs.version }}"
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            PRERELEASE_FLAG="--prerelease"
          else
            PRERELEASE_FLAG=""
          fi
          gh release create "$TAG" \
            --title "Release $TAG" \
            --generate-notes \
            $PRERELEASE_FLAG \
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
