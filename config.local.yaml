# Example configuration using typed controller configurations
# This demonstrates how each controller can have its own dedicated configuration struct

# Server configuration
server:
  address: "localhost:8080"
  session_secret: "${SESSION_SECRET}"  # Session secret (can use env var)
  session_name: "sargantana_session"    # Session cookie name
  secrets_dir: ".secrets"            # Directory containing secret files
  # Note: Server now defaults to cookie-based sessions
  # For Redis sessions, configure redis section below and use SetSessionStore() in your code

# Redis configuration (optional - for Redis session store or general Redis usage)
# To use Redis for sessions, create a Redis session store in your application code:
#   redisConfig, _ := config.LoadConfig[database.RedisConfig]("redis", cfg)
#   pool, _ := redisConfig.CreateClient()
#   redisStore, _ := session.NewRedisSessionStore(isRelease, secret, pool)
#   server.SetSessionStore(&redisStore)
redis:
  address: "localhost:6380"  # TLS Redis server address
  username: "redisuser"      # Redis username (if using ACL)
  password: "redispass"      # Redis password
  database: 0                # Redis database number
  max_idle: 10               # Max idle connections
  idle_timeout: "2m"         # Idle timeout
  tls:                       # TLS configuration for secure connections
    insecure_skip_verify: true        # Skip certificate verification for self-signed certs
    cert_file: "./certs/client.crt"   # Client certificate file
    key_file: "./certs/client.key"    # Client private key file
    ca_file: "./certs/ca.crt"         # CA certificate file

vault:
  address: "http://localhost:8200"  # Vault server address
  token: "${VAULT_TOKEN}"                     # Vault authentication token (can use env var)
  path: "secret/data/sargantana"              # Path to secrets in Vault (for KV v2 engine)
  namespace: ""                               # Optional: Vault namespace for Enterprise (leave empty for OSS)

# Controller configurations
controllers:
  # Static file controller - serves files from /static/* and templates
  - type: "static"
    config:
      path: "/static"           # URL path to serve static files
      dir: "./static"            # Directory containing static files

  # Template controller - serves HTML templates
  - type: "template"
    config:
      path: "./templates"        # Directory containing template files

  # Load balancer controller
  - type: "load_balancer"
    name: "dmz"
    config:
      endpoints: # Backend servers to load balance
        - "http://backend1:8081"
        - "http://backend2:8082"
        - "http://backend3:8083"
      path: "/api1"             # Path root to load balance
      auth: false                 # Require authentication

  - type: "load_balancer"
    name: "internal"
    config:
      endpoints: # Backend servers to load balance
        - "http://backend3:8081"
        - "http://backend4:8082"
        - "http://backend5:8083"
      path: "/api2"             # Path root to load balance
      auth: true                 # Require authentication

  # Authentication controller
  - type: "auth"
    config:
      callback_host: "https://myapp.com"           # Base URL for OAuth callbacks
      login_path: "/auth/{provider}"              # Login endpoint pattern
      logout_path: "/auth/{provider}/logout"           # Logout endpoint pattern
      callback_path: "/auth/{provider}/callback"  # OAuth callback pattern
      user_info_path: "/user"                      # User info endpoint
      redirect_on_login: "/"                       # Where to redirect after login
      redirect_on_logout: "/"                       # Where to redirect after logout
      providers:
        openid-connect:
          key: "${file:OPENID_CONNECT_KEY}"                     # OpenID Connect client key
          secret: "${file:OPENID_CONNECT_SECRET}"
          url: "http://localhost:8081/default/.well-known/openid-configuration"  # OpenID Connect discovery URL
          scopes:
            - "openid"
            - "profile"
            - "email"

        # google:
        #   key: "${vault:GOOGLE_KEY}"      # Uncomment and configure Vault properly
        #   secret: "${file:GOOGLE_SECRET}"
        #   scopes:
        #     - "openid"
        #     - "profile"
        #     - "email"


